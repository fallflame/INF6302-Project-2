digraph UML {node [shape = record]edge [arrowtail = empty]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
Authenticator [label=" {Authenticator||# getPasswordAuthentication( )  : PasswordAuthentication\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
Authenticator [label=" {Authenticator||# getPasswordAuthentication( )  : PasswordAuthentication\l}"]
InternetAddress [label=" {InternetAddress||+ InternetAddress( String from ) \l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
Authenticator [label=" {Authenticator||# getPasswordAuthentication( )  : PasswordAuthentication\l}"]
InternetAddress [label=" {InternetAddress||+ InternetAddress( String from ) \l}"]
MimeMessage [label=" {MimeMessage||+ MimeMessage( Session session ) \l+ setFrom( InternetAddress from )  : void\l+ setSubject( String subject )  : void\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
Authenticator [label=" {Authenticator||# getPasswordAuthentication( )  : PasswordAuthentication\l}"]
InternetAddress [label=" {InternetAddress||+ InternetAddress( String from ) \l}"]
MimeMessage [label=" {MimeMessage||+ MimeMessage( Session session ) \l+ setFrom( InternetAddress from )  : void\l+ setSubject( String subject )  : void\l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
Authenticator [label=" {Authenticator||# getPasswordAuthentication( )  : PasswordAuthentication\l}"]
InternetAddress [label=" {InternetAddress||+ InternetAddress( String from ) \l}"]
MimeMessage [label=" {MimeMessage||+ MimeMessage( Session session ) \l+ setFrom( InternetAddress from )  : void\l+ setSubject( String subject )  : void\l}"]
MimePartDataSource [label=" {MimePartDataSource||+ MimePartDataSource( MimePart part ) \l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
Authenticator [label=" {Authenticator||# getPasswordAuthentication( )  : PasswordAuthentication\l}"]
InternetAddress [label=" {InternetAddress||+ InternetAddress( String from ) \l}"]
MimeMessage [label=" {MimeMessage||+ MimeMessage( Session session ) \l+ setFrom( InternetAddress from )  : void\l+ setSubject( String subject )  : void\l}"]
MimePartDataSource [label=" {MimePartDataSource||+ MimePartDataSource( MimePart part ) \l}"]
PasswordAuthentication [label=" {PasswordAuthentication||+ PasswordAuthentication( String user , String password ) \l}"]
ArrayELResolver [label=" {ArrayELResolver|- readOnly : boolean\l|+ ArrayELResolver( ) \l+ ArrayELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static checkBounds( Object base , int idx )  : void\l- static coerce( Object property )  : int\l}"]
BeanProperties [label=" {BeanProperties|- properties : Map\l- type : Class\l|+ BeanProperties( Class &lt; ? &gt; type ) throws ELException \l- populateFromInterfaces( Class &lt; ? &gt; aClass ) throws IntrospectionException  : void\l- get( ELContext ctx , String name )  : BeanProperty\l+ getBeanProperty( String name )  : BeanProperty\l- getType( )  : Class\l}"]
BeanProperty [label=" {BeanProperty|- type : Class\l- owner : Class\l- descriptor : PropertyDescriptor\l- read : Method\l- write : Method\l|+ BeanProperty( Class &lt; ? &gt; owner , PropertyDescriptor descriptor ) \l+ getPropertyType( )  : Class\l+ isReadOnly( )  : boolean\l+ getWriteMethod( )  : Method\l+ getReadMethod( )  : Method\l- write( ELContext ctx )  : Method\l- read( ELContext ctx )  : Method\l}"]
ConcurrentCache [label=" {ConcurrentCache|- size : int\l- eden : Map\l- longterm : Map\l|+ ConcurrentCache( int size ) \l+ get( K key )  : V\l+ put( K key , V value )  : void\l}"]
BeanELResolver [label=" {BeanELResolver|- static CACHE_SIZE : int\l- static CACHE_SIZE_PROP : String\l- readOnly : boolean\l- cache : ConcurrentCache\l|+ run( )  : Integer\l+ BeanELResolver( ) \l+ BeanELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- property( ELContext ctx , Object base , Object property )  : BeanProperty\l}"]
BeanNameELResolver [label=" {BeanNameELResolver|- beanNameResolver : BeanNameResolver\l|+ BeanNameELResolver( BeanNameResolver beanNameResolver ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
BeanNameResolver [label=" {BeanNameResolver||+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
FeatureIterator [label=" {FeatureIterator|- context : ELContext\l- base : Object\l- resolvers : ELResolver\l- size : int\l- itr : Iterator\l- idx : int\l- next : FeatureDescriptor\l|+ FeatureIterator( ELContext context , Object base , ELResolver [ ] resolvers , int size ) \l- guaranteeIterator( )  : void\l+ hasNext( )  : boolean\l+ next( )  : FeatureDescriptor\l+ remove( )  : void\l}"]
CompositeELResolver [label=" {CompositeELResolver|- static SCOPED_ATTRIBUTE_EL_RESOLVER : Class\l- size : int\l- resolvers : ELResolver\l|+ CompositeELResolver( ) \l+ add( ELResolver elResolver )  : void\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELClass [label=" {ELClass|- clazz : Class\l|+ ELClass( Class &lt; ? &gt; clazz ) \l+ getKlass( )  : Class\l}"]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
ELContextEvent [label=" {ELContextEvent|- static serialVersionUID : long\l|+ ELContextEvent( ELContext source ) \l+ getELContext( )  : ELContext\l}"]
ELException [label=" {ELException|- static serialVersionUID : long\l|+ ELException( ) \l+ ELException( String message ) \l+ ELException( Throwable cause ) \l+ ELException( String message , Throwable cause ) \l}"]
ELManager [label=" {ELManager|- context : StandardELContext\l|+ static getExpressionFactory( )  : ExpressionFactory\l+ getELContext( )  : StandardELContext\l+ setELContext( ELContext context )  : ELContext\l+ addBeanNameResolver( BeanNameResolver beanNameResolver )  : void\l+ addELResolver( ELResolver resolver )  : void\l+ mapFunction( String prefix , String function , Method method )  : void\l+ setVariable( String variable , ValueExpression expression )  : void\l+ importStatic( String staticMemberName ) throws javax . el . ELException  : void\l+ importClass( String className ) throws javax . el . ELException  : void\l+ importPackage( String packageName )  : void\l+ defineBean( String name , Object bean )  : Object\l+ addEvaluationListener( EvaluationListener listener )  : void\l}"]
MethodSignature [label=" {MethodSignature|- name : String\l- parameterTypeNames : String\l|+ MethodSignature( ELContext context , String methodName , String className ) throws NoSuchMethodException \l+ getName( )  : String\l+ getParamTypeNames( )  : String\l}"]
ELProcessor [label=" {ELProcessor|- static PRIMITIVES : Set\l- static EMPTY_STRING_ARRAY : String\l- manager : ELManager\l- context : ELContext\l- factory : ExpressionFactory\l|+ getELManager( )  : ELManager\l+ eval( String expression )  : Object\l+ getValue( String expression , Class &lt; ? &gt; expectedType )  : Object\l+ setValue( String expression , Object value )  : void\l+ setVariable( String variable , String expression )  : void\l+ defineFunction( String prefix , String function , String className , String methodName ) throws ClassNotFoundException , NoSuchMethodException  : void\l+ defineFunction( String prefix , String function , Method method ) throws java . lang . NoSuchMethodException  : void\l+ defineBean( String name , Object bean )  : void\l- static bracket( String expression )  : String\l}"]
ELResolver [label=" {ELResolver|+ static TYPE : String\l+ static RESOLVABLE_AT_DESIGN_TIME : String\l|+ getValue( ELContext context , Object base , Object property )  : Object\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
EvaluationListener [label=" {EvaluationListener||+ beforeEvaluation( ELContext context , String expression )  : void\l+ afterEvaluation( ELContext context , String expression )  : void\l+ propertyResolved( ELContext context , Object base , Object property )  : void\l}"]
Expression [label=" {Expression|- static serialVersionUID : long\l|+ getExpressionString( )  : String\l+ equals( Object obj )  : boolean\l+ hashCode( )  : int\l+ isLiteralText( )  : boolean\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader cl ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- className : String\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getFactoryClassName( )  : String\l+ setFactoryClassName( String className )  : void\l+ getFactoryClass( )  : Class\l+ setFactoryClass( Class &lt; ? &gt; clazz )  : void\l}"]
ExpressionFactory [label=" {ExpressionFactory|- static IS_SECURITY_ENABLED : boolean\l- static SERVICE_RESOURCE_NAME : String\l- static PROPERTY_NAME : String\l- static PROPERTY_FILE : String\l- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|+ run( )  : String\l+ static newInstance( )  : ExpressionFactory\l+ static newInstance( Properties properties )  : ExpressionFactory\l+ createValueExpression( ELContext context , String expression , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createValueExpression( Object instance , Class &lt; ? &gt; expectedType )  : ValueExpression\l+ createMethodExpression( ELContext context , String expression , Class &lt; ? &gt; expectedReturnType , Class &lt; ? &gt; [ ] expectedParamTypes )  : MethodExpression\l+ coerceToType( Object obj , Class &lt; ? &gt; expectedType )  : Object\l+ getStreamELResolver( )  : ELResolver\l+ getInitFunctionMap( )  : Map\l- static discoverClassName( ClassLoader tccl )  : String\l+ run( )  : String\l+ run( )  : String\l- static getClassNameServices( ClassLoader tccl )  : String\l- static getClassNameJreDir( )  : String\l- static getClassNameSysProp( )  : String\l}"]
FunctionMapper [label=" {FunctionMapper||+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
ImportHandler [label=" {ImportHandler|- packageNames : List\l- classNames : ConcurrentHashMap\l- clazzes : Map\l- statics : Map\l|+ ImportHandler( ) \l+ importStatic( String name ) throws javax . el . ELException  : void\l+ importClass( String name ) throws javax . el . ELException  : void\l+ importPackage( String name )  : void\l+ resolveClass( String name )  : java\l+ resolveStatic( String name )  : java\l- findClass( String name )  : Class\l}"]
LambdaExpression [label=" {LambdaExpression|- formalParameters : List\l- expression : ValueExpression\l- nestedArguments : Map\l- context : ELContext\l|+ LambdaExpression( List &lt; String &gt; formalParameters , ValueExpression expression ) \l+ setELContext( ELContext context )  : void\l+ invoke( ELContext context , Object ... args ) throws ELException  : Object\l+ invoke( Object ... args )  : java\l}"]
ListELResolver [label=" {ListELResolver|- readOnly : boolean\l- static UNMODIFIABLE : Class\l|+ ListELResolver( ) \l+ ListELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l- static coerce( Object property )  : int\l}"]
MapELResolver [label=" {MapELResolver|- static UNMODIFIABLE : Class\l- readOnly : boolean\l|+ MapELResolver( ) \l+ MapELResolver( boolean readOnly ) \l+ getType( ELContext context , Object base , Object property )  : Class\l+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
MethodExpression [label=" {MethodExpression|- static serialVersionUID : long\l|+ getMethodInfo( ELContext context )  : MethodInfo\l+ invoke( ELContext context , Object [ ] params )  : Object\l+ isParametersProvided( )  : boolean\l+ isParmetersProvided( )  : boolean\l}"]
MethodInfo [label=" {MethodInfo|- name : String\l- paramTypes : Class\l- returnType : Class\l|+ MethodInfo( String name , Class &lt; ? &gt; returnType , Class &lt; ? &gt; [ ] paramTypes ) \l+ getName( )  : String\l+ getReturnType( )  : Class\l+ getParamTypes( )  : Class\l}"]
MethodNotFoundException [label=" {MethodNotFoundException|- static serialVersionUID : long\l|+ MethodNotFoundException( ) \l+ MethodNotFoundException( String message ) \l+ MethodNotFoundException( Throwable cause ) \l+ MethodNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotFoundException [label=" {PropertyNotFoundException|- static serialVersionUID : long\l|+ PropertyNotFoundException( ) \l+ PropertyNotFoundException( String message ) \l+ PropertyNotFoundException( Throwable cause ) \l+ PropertyNotFoundException( String message , Throwable cause ) \l}"]
PropertyNotWritableException [label=" {PropertyNotWritableException|- static serialVersionUID : long\l|+ PropertyNotWritableException( ) \l+ PropertyNotWritableException( String message ) \l+ PropertyNotWritableException( Throwable cause ) \l+ PropertyNotWritableException( String message , Throwable cause ) \l}"]
ResourceBundleELResolver [label=" {ResourceBundleELResolver||+ ResourceBundleELResolver( ) \l+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
StandardVariableMapper [label=" {StandardVariableMapper|- vars : Map\l|+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
StandardBeanNameResolver [label=" {StandardBeanNameResolver|- beans : Map\l|+ StandardBeanNameResolver( Map &lt; String , Object &gt; beans ) \l+ isNameResolved( String beanName )  : boolean\l+ getBean( String beanName )  : Object\l+ setBeanValue( String beanName , Object value ) throws PropertyNotWritableException  : void\l+ isReadOnly( String beanName )  : boolean\l+ canCreateBean( String beanName )  : boolean\l}"]
StandardFunctionMapper [label=" {StandardFunctionMapper|- methods : Map\l|+ StandardFunctionMapper( Map &lt; String , Method &gt; initFunctionMap ) \l+ resolveFunction( String prefix , String localName )  : Method\l+ mapFunction( String prefix , String localName , Method method )  : void\l}"]
StandardELContext [label=" {StandardELContext|- wrappedContext : ELContext\l- variableMapper : VariableMapper\l- functionMapper : FunctionMapper\l- standardResolver : CompositeELResolver\l- customResolvers : CompositeELResolver\l- localBeans : Map\l|+ StandardELContext( ExpressionFactory factory ) \l+ StandardELContext( ELContext context ) \l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ addELResolver( ELResolver resolver )  : void\l+ getFunctionMapper( )  : FunctionMapper\l+ getVariableMapper( )  : VariableMapper\lgetLocalBeans( )  : Map\l}"]
StaticFieldELResolver [label=" {StaticFieldELResolver||+ getValue( ELContext context , Object base , Object property )  : Object\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ invoke( ELContext context , Object base , Object method , Class &lt; ? &gt; [ ] paramTypes , Object [ ] params )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l}"]
TypeConverter [label=" {TypeConverter||+ getValue( ELContext context , Object base , Object property )  : Object\l+ getType( ELContext context , Object base , Object property )  : Class\l+ setValue( ELContext context , Object base , Object property , Object value )  : void\l+ isReadOnly( ELContext context , Object base , Object property )  : boolean\l+ getFeatureDescriptors( ELContext context , Object base )  : Iterator\l+ getCommonPropertyType( ELContext context , Object base )  : Class\l+ convertToType( ELContext context , Object obj , Class &lt; ? &gt; type )  : Object\l}"]
CacheKey [label=" {CacheKey|- hash : int\l- ref : WeakReference\l|+ CacheKey( ClassLoader key ) \l+ hashCode( )  : int\l+ equals( Object obj )  : boolean\l}"]
CacheValue [label=" {CacheValue|- lock : ReadWriteLock\l- ref : WeakReference\l|+ CacheValue( ) \l+ getLock( )  : ReadWriteLock\l+ getExpressionFactory( )  : ExpressionFactory\l+ setExpressionFactory( ExpressionFactory factory )  : void\l}"]
Wrapper [label=" {Wrapper||+ static wrap( Method [ ] methods , String name )  : List\l+ static wrap( Constructor &lt; ? &gt; [ ] constructors )  : List\l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MethodWrapper [label=" {MethodWrapper|- m : Method\l|+ MethodWrapper( Method m ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
ConstructorWrapper [label=" {ConstructorWrapper|- c : Constructor\l|+ ConstructorWrapper( Constructor &lt; ? &gt; c ) \l+ unWrap( )  : Object\l+ getParameterTypes( )  : Class\l+ isVarArgs( )  : boolean\l+ isBridge( )  : boolean\l}"]
MatchResult [label=" {MatchResult|- exact : int\l- assignable : int\l- coercible : int\l- bridge : boolean\l|+ MatchResult( int exact , int assignable , int coercible , boolean bridge ) \l+ getExact( )  : int\l+ getAssignable( )  : int\l+ getCoercible( )  : int\l+ isBridge( )  : boolean\l+ compareTo( MatchResult o )  : int\l}"]
Util [label=" {Util|- static nullTcclFactory : CacheValue\l- static factoryCache : ConcurrentMap\l|static handleThrowable( Throwable t )  : void\lstatic message( ELContext context , String name , Object ... props )  : String\lstatic getExpressionFactory( )  : ExpressionFactory\lstatic findMethod( Class &lt; ? &gt; clazz , String methodName , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Method\l- static findWrapper( Class &lt; ? &gt; clazz , List &lt; Wrapper &gt; wrappers , String name , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Wrapper\l- static paramString( Class &lt; ? &gt; [ ] types )  : String\l- static resolveAmbiguousWrapper( Set &lt; Wrapper &gt; candidates , Class &lt; ? &gt; [ ] paramTypes )  : Wrapper\lstatic isAssignableFrom( Class &lt; ? &gt; src , Class &lt; ? &gt; target )  : boolean\l- static isCoercibleFrom( Object src , Class &lt; ? &gt; target )  : boolean\l- static getTypesFromValues( Object [ ] values )  : Class\lstatic getMethod( Class &lt; ? &gt; type , Method m )  : Method\lstatic findConstructor( Class &lt; ? &gt; clazz , Class &lt; ? &gt; [ ] paramTypes , Object [ ] paramValues )  : Constructor\lstatic getConstructor( Class &lt; ? &gt; type , Constructor &lt; ? &gt; c )  : Constructor\lstatic buildParameters( Class &lt; ? &gt; [ ] parameterTypes , boolean isVarArgs , Object [ ] params )  : Object\l}"]
ValueExpression [label=" {ValueExpression|- static serialVersionUID : long\l|+ getValue( ELContext context )  : Object\l+ setValue( ELContext context , Object value )  : void\l+ isReadOnly( ELContext context )  : boolean\l+ getType( ELContext context )  : Class\l+ getExpectedType( )  : Class\l+ getValueReference( ELContext context )  : ValueReference\l}"]
ValueReference [label=" {ValueReference|- static serialVersionUID : long\l- base : Object\l- property : Object\l|+ ValueReference( Object base , Object property ) \l+ getBase( )  : Object\l+ getProperty( )  : Object\l}"]
VariableMapper [label=" {VariableMapper||+ resolveVariable( String variable )  : ValueExpression\l+ setVariable( String variable , ValueExpression expression )  : ValueExpression\l}"]
Authenticator [label=" {Authenticator||# getPasswordAuthentication( )  : PasswordAuthentication\l}"]
InternetAddress [label=" {InternetAddress||+ InternetAddress( String from ) \l}"]
MimeMessage [label=" {MimeMessage||+ MimeMessage( Session session ) \l+ setFrom( InternetAddress from )  : void\l+ setSubject( String subject )  : void\l}"]
MimePartDataSource [label=" {MimePartDataSource||+ MimePartDataSource( MimePart part ) \l}"]
PasswordAuthentication [label=" {PasswordAuthentication||+ PasswordAuthentication( String user , String password ) \l}"]
Session [label=" {Session||+ static getInstance( Properties props , Authenticator auth )  : Session\l+ static getInstance( Properties props )  : Session\l}"]
ArrayELResolver->ELResolver [arrowhead=empty]
BeanELResolver->ELResolver [arrowhead=empty]
ConcurrentCache->BeanELResolver [arrowhead=diamond]
BeanNameELResolver->ELResolver [arrowhead=empty]
BeanNameResolver->BeanNameELResolver [arrowhead=diamond]
CompositeELResolver->ELResolver [arrowhead=empty]
ELResolver->CompositeELResolver [arrowhead=diamond]
ELContext->FeatureIterator [arrowhead=diamond]
ELResolver->FeatureIterator [arrowhead=diamond]
ImportHandler->ELContext [arrowhead=diamond]
StandardELContext->ELManager [arrowhead=diamond]
ELManager->ELProcessor [arrowhead=diamond]
ELContext->ELProcessor [arrowhead=diamond]
ExpressionFactory->ELProcessor [arrowhead=diamond]
CacheValue->ExpressionFactory [arrowhead=diamond]
ValueExpression->LambdaExpression [arrowhead=diamond]
ELContext->LambdaExpression [arrowhead=diamond]
ListELResolver->ELResolver [arrowhead=empty]
MapELResolver->ELResolver [arrowhead=empty]
MethodExpression->Expression [arrowhead=empty]
MethodNotFoundException->ELException [arrowhead=empty]
PropertyNotFoundException->ELException [arrowhead=empty]
PropertyNotWritableException->ELException [arrowhead=empty]
ResourceBundleELResolver->ELResolver [arrowhead=empty]
StandardELContext->ELContext [arrowhead=empty]
ELContext->StandardELContext [arrowhead=diamond]
VariableMapper->StandardELContext [arrowhead=diamond]
FunctionMapper->StandardELContext [arrowhead=diamond]
CompositeELResolver->StandardELContext [arrowhead=diamond]
StandardVariableMapper->VariableMapper [arrowhead=empty]
StandardBeanNameResolver->BeanNameResolver [arrowhead=empty]
StandardFunctionMapper->FunctionMapper [arrowhead=empty]
StaticFieldELResolver->ELResolver [arrowhead=empty]
TypeConverter->ELResolver [arrowhead=empty]
CacheValue->Util [arrowhead=diamond]
MethodWrapper->Wrapper [arrowhead=empty]
ConstructorWrapper->Wrapper [arrowhead=empty]
ValueExpression->Expression [arrowhead=empty]

}
