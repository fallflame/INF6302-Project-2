digraph UML {node [shape = record]edge [arrowtail = empty]
ELContext [label=" {ELContext|- locale : Locale\l- map : Map\l- resolved : boolean\l- importHandler : ImportHandler\l- listeners : List\l- lambdaArguments : Deque\l|+ ELContext( ) \l+ setPropertyResolved( boolean resolved )  : void\l+ setPropertyResolved( Object base , Object property )  : void\l+ isPropertyResolved( )  : boolean\l+ putContext( @ SuppressWarnings ( \"rawtypes\" ) Class key , Object contextObject )  : void\l+ getContext( @ SuppressWarnings ( \"rawtypes\" ) Class key )  : Object\l+ getELResolver( )  : ELResolver\l+ getImportHandler( )  : ImportHandler\l+ getFunctionMapper( )  : FunctionMapper\l+ getLocale( )  : Locale\l+ setLocale( Locale locale )  : void\l+ getVariableMapper( )  : VariableMapper\l+ addEvaluationListener( EvaluationListener listener )  : void\l+ getEvaluationListeners( )  : List\l+ notifyBeforeEvaluation( String expression )  : void\l+ notifyAfterEvaluation( String expression )  : void\l+ notifyPropertyResolved( Object base , Object property )  : void\l+ isLambdaArgument( String name )  : boolean\l+ getLambdaArgument( String name )  : Object\l+ enterLambdaScope( Map &lt; String , Object &gt; arguments )  : void\l+ exitLambdaScope( )  : void\l+ convertToType( Object obj , Class &lt; ? &gt; type )  : Object\l}"]
}